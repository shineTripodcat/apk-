#!/bin/sh /etc/rc.common
# Copyright (C) 2006 OpenWrt.org

START=50

# Improved MAC address extraction function
get_mac_for_ip() {
	local ip="$1"
	local mac=""
	
	# Try multiple methods to get MAC address
	if echo "$ip" | grep -q ":"; then
		# IPv6 address - try different parsing methods
		mac=$(ip -6 neigh show "$ip" 2>/dev/null | grep -o '[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]' | head -n1)
		[ -z "$mac" ] && mac=$(ip -6 neigh 2>/dev/null | grep "$ip" | grep -o '[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]' | head -n1)
	else
		# IPv4 address - try different parsing methods
		mac=$(ip neigh show "$ip" 2>/dev/null | grep -o '[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]' | head -n1)
		[ -z "$mac" ] && mac=$(arp -n "$ip" 2>/dev/null | grep -o '[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]' | head -n1)
		[ -z "$mac" ] && mac=$(cat /proc/net/arp 2>/dev/null | grep "$ip" | grep -o '[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]' | head -n1)
	fi
	
	echo "$mac"
}

# Improved IPv4 address extraction function
get_ipv4_for_mac() {
	local mac="$1"
	local ipv4=""
	
	# Try multiple methods to get IPv4 address
	ipv4=$(ip neigh show 2>/dev/null | grep -i "$mac" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | head -n1)
	[ -z "$ipv4" ] && ipv4=$(arp -a 2>/dev/null | grep -i "$mac" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | head -n1)
	[ -z "$ipv4" ] && ipv4=$(cat /proc/net/arp 2>/dev/null | grep -i "$mac" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | head -n1)
	
	echo "$ipv4"
}

parse_device() {
	local cfg="$1" device_type ip mac download upload
	
	config_get device_type "$cfg" device_type "ip"
	config_get ip "$cfg" ip
	config_get mac "$cfg" mac
	config_get download "$cfg" download
	config_get upload "$cfg" upload
	
	# Validate required parameters
	[ -z "$download" ] || [ -z "$upload" ] && {
		echo "Error: download and upload speeds are required for device $cfg"
		return 1
	}
	
	config_get_bool mac_enabled eqos ipv6_enabled 0
	
	if [ "$device_type" = "mac" ] && [ -n "$mac" ]; then
		# MAC address mode - use comprehensive limiting
		if [ $mac_enabled -eq 1 ]; then
			# Use Method 3: MAC-based comprehensive limiting
			eqos add_ipv6 "$mac" $download $upload
		else
			# Fallback: get IPv4 address for this MAC and use traditional method
			ipv4=$(get_ipv4_for_mac "$mac")
			if [ -n "$ipv4" ]; then
				eqos add "$ipv4" $download $upload
			else
				echo "Warning: No IPv4 address found for MAC $mac, skipping"
			fi
		fi
	elif [ "$device_type" = "ip" ] && [ -n "$ip" ]; then
		# IP address mode - traditional method
		if echo "$ip" | grep -q ":"; then
			# This is an IPv6 address
			if [ $mac_enabled -eq 1 ]; then
				# Get MAC address for the IPv6 address
				mac_addr=$(get_mac_for_ip "$ip")
				if [ -n "$mac_addr" ]; then
					eqos add_ipv6 "$mac_addr" $download $upload
				else
					echo "Warning: No MAC address found for IPv6 $ip, cannot apply comprehensive limiting"
				fi
			else
				echo "Warning: IPv6 address $ip specified but MAC-based limiting is disabled"
			fi
		else
			# This is an IPv4 address
			eqos add "$ip" $download $upload
			
			# If MAC-based limiting is enabled, also add IPv6 rules for this device's MAC
			if [ $mac_enabled -eq 1 ]; then
				# Get MAC address for the IPv4 address
				mac_addr=$(get_mac_for_ip "$ip")
				if [ -n "$mac_addr" ]; then
					eqos add_ipv6 "$mac_addr" $download $upload
				fi
			fi
		fi
	else
		echo "Error: Invalid device configuration for $cfg - missing IP or MAC address"
		return 1
	fi
}

eqos_start() {
	local cfg="$1" enabled download upload
	
	config_get_bool enabled "$cfg" enabled 0
	[ $enabled -eq 0 ] && return 0
	
	config_get download "$cfg" download
	config_get upload "$cfg" upload
	
	eqos start $download $upload
	
	config_foreach parse_device device
}

start() {
	eqos stop
	
	config_load eqos
	config_foreach eqos_start eqos
}

stop() {
	eqos stop
}