#!/bin/sh

dev=br-lan

stop_qos() {
	tc qdisc del dev $dev root 2>/dev/null
	tc qdisc del dev $dev ingress 2>/dev/null
	tc qdisc del dev ${dev}-ifb root 2>/dev/null
	ip link del dev ${dev}-ifb 2>/dev/null
	
	# Clear IPv6 iptables rules
	ip6tables -t mangle -F EQOS_OUT 2>/dev/null
	ip6tables -t mangle -F EQOS_IN 2>/dev/null
	ip6tables -t mangle -X EQOS_OUT 2>/dev/null
	ip6tables -t mangle -X EQOS_IN 2>/dev/null
}

start_qos() {
	local dl=$1
	local up=$2
	
	tc qdisc add dev $dev root handle 1: htb
	tc class add dev $dev parent 1: classid 1:1 htb rate ${dl}mbit
	
	ip link add dev ${dev}-ifb name ${dev}-ifb type ifb
	ip link set dev ${dev}-ifb up
	
	tc qdisc add dev ${dev}-ifb root handle 1: htb
	tc class add dev ${dev}-ifb parent 1: classid 1:1 htb rate ${up}mbit
	
	tc qdisc add dev $dev ingress
	tc filter add dev $dev parent ffff: protocol ip u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ${dev}-ifb
	tc filter add dev $dev parent ffff: protocol ipv6 u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ${dev}-ifb
	
	# Initialize IPv6 iptables chains
	ip6tables -t mangle -N EQOS_OUT 2>/dev/null
	ip6tables -t mangle -N EQOS_IN 2>/dev/null
	ip6tables -t mangle -I FORWARD -j EQOS_OUT 2>/dev/null
	ip6tables -t mangle -I FORWARD -j EQOS_IN 2>/dev/null
}

case "$1" in
	"stop")
		stop_qos
	;;
	"start")
		stop_qos
		start_qos $2 $3
	;;
	"add")
		ip="$2"
		dl="$3"
		up="$4"
		
		cnt=$(tc class show dev $dev | wc -l)
		
		tc class add dev $dev parent 1:1 classid 1:1$cnt htb rate ${dl}mbit ceil ${dl}mbit
		tc filter add dev $dev parent 1:0 protocol ip u32 match ip dst $ip flowid 1:1$cnt
		
		tc class add dev ${dev}-ifb parent 1:1 classid 1:1$cnt htb rate ${up}mbit ceil ${up}mbit
		tc filter add dev ${dev}-ifb parent 1:0 protocol ip u32 match ip src $ip flowid 1:1$cnt
	;;
	"add_ipv6")
		mac="$2"
		dl="$3"
		up="$4"
		
		# Get IPv6 addresses for the MAC address
		ipv6_addrs=$(ip -6 neigh show | grep "$mac" | awk '{print $1}' | grep -v "^fe80")
		
		for ipv6 in $ipv6_addrs; do
			cnt=$(tc class show dev $dev | wc -l)
			mark=$((0x1000 + cnt))
			
			# Create tc classes
			tc class add dev $dev parent 1:1 classid 1:1$cnt htb rate ${dl}mbit ceil ${dl}mbit
			tc class add dev ${dev}-ifb parent 1:1 classid 1:1$cnt htb rate ${up}mbit ceil ${up}mbit
			
			# Create tc filters using handle (MARK)
			tc filter add dev $dev parent 1:0 protocol ipv6 handle $mark fw flowid 1:1$cnt
			tc filter add dev ${dev}-ifb parent 1:0 protocol ipv6 handle $mark fw flowid 1:1$cnt
			
			# Create ip6tables rules to mark packets
			ip6tables -t mangle -A EQOS_OUT -d $ipv6/128 -j MARK --set-mark $mark
			ip6tables -t mangle -A EQOS_IN -s $ipv6/128 -j MARK --set-mark $mark
		done
	;;
	*)
		echo "Usage: $0 <command> [options]"
		echo "Commands:"
		echo "  start dl_rate up_rate       #Total bandwidth (Mbit/s)"
		echo "  stop"
		echo "  add ip dl_rate up_rate      #Limiting the bandwidth of a single IP (Mbit/s)"
		echo "  add_ipv6 mac dl_rate up_rate #Limiting the bandwidth of IPv6 addresses by MAC (Mbit/s)"
		echo "Example:"
		echo "  $0 start 30 20              # Total bandwidth: down 30Mbit/s up 20Mbit/s"
		echo "  $0 add 192.168.22.12 10 2   # down 10Mbit/s  up 2Mbit/s"
		echo "  $0 add_ipv6 aa:bb:cc:dd:ee:ff 10 2   # IPv6 down 10Mbit/s  up 2Mbit/s (uses ip6tables+tc)"
		echo "Note: IPv6 limiting requires ip6tables and uses MARK-based traffic classification"
	;;
esac
